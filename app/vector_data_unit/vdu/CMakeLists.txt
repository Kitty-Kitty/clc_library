

#set cp_vdu name
#SET(CP_VDU_LIBRARY_PROJECT_NAME cp_vdu)
#SET(CP_VDU_LIBRARY_LIBRARY_STATIC_NAME lib${CP_VDU_LIBRARY_PROJECT_NAME}.a)
#SET(CP_VDU_LIBRARY_LIBRARY_SHARED_NAME lib${CP_VDU_LIBRARY_PROJECT_NAME}.so)

#set cp_vdu root directory
SET(CP_VDU_PROJECT_SOURCE_DIR ${CP_APP_VDU_DIR})


#set src directory
SET(CP_VDU_SRC_DIR ${CP_VDU_PROJECT_SOURCE_DIR}/src)
#set include directory
SET(CP_VDU_INCLUDE_DIR ${CP_VDU_PROJECT_SOURCE_DIR}/include)
#set lib directory
SET(CP_VDU_LIBRARY_DIR ${CP_VDU_PROJECT_SOURCE_DIR}/lib)


#set qt library information
SET(QT_INCLUDE_DIR ${CP_THIRD_PARTY_DIR}/lib/arm-hisiv400/qt-5.9.6/include)
SET(QT_LIBRARY_DIR ${CP_THIRD_PARTY_DIR}/lib/arm-hisiv400/qt-5.9.6/lib)


#set hi3536 gpu library information
SET(HI3536_GPU_INCLUDE_DIR ${CP_THIRD_PARTY_DIR}/src/hi/hi3536/mpp_single/component/gpu/release/include)
SET(HI3536_GPU_LIBRARY_DIR ${CP_THIRD_PARTY_DIR}/src/hi/hi3536/mpp_single/component/gpu/release/lib)


#get file list
AUX_SOURCE_DIRECTORY(${CP_VDU_SRC_DIR} CP_VDU_LIBRARY_FILES_LIST)

#add all subdirectory
ADD_SUBDIRECTORY(${CP_VDU_SRC_DIR})

#MESSAGE(STATUS "CP_VDU_LIBRARY_FILES_LIST : "${CP_VDU_LIBRARY_FILES_LIST})

#add player include direntories
INCLUDE_DIRECTORIES(
    ${CP_VDU_INCLUDE_DIR}
	${QT_INCLUDE_DIR}
	${HI3536_GPU_INCLUDE_DIR}
    )


#add player library directories 
LINK_DIRECTORIES(
    ${CP_VDU_LIBRARY_DIR}
	${QT_LIBRARY_DIR}
	${HI3536_GPU_LIBRARY_DIR}
    )
#MESSAGE(STATUS "CP_VDU_LIBRARY_DIR : "${CP_VDU_LIBRARY_DIR})

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wwrite-strings -std=c++11 -g")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lpthread  -ldl -lrt -lc")
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lpthread -ldl -lrt -lc")

#make cp_lib.lib
SET(LIBRARY_OUTPUT_PATH ${CP_PROJECT_OUTPUT_TOP_DIR}/${CP_VDU_LIBRARY_PROJECT_NAME})

add_library (CP_VDU_LIBRARY_SOURCES OBJECT ${CP_VDU_LIBRARY_FILES_LIST})
ADD_LIBRARY(${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME} SHARED $<TARGET_OBJECTS:CP_VDU_LIBRARY_SOURCES>)
ADD_LIBRARY(${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME} STATIC $<TARGET_OBJECTS:CP_VDU_LIBRARY_SOURCES>)


#set library
SET(CP_VDU_LIBRARY_TARGET_LINK_LIBRARIES
	${CP_PROJECT_LIBRARY_STATIC_NAME}
	-lQt5Charts
	-lQt5Svg
	-lQt5Widgets
	-lQt5OpenGL
	-lQt5Core
	-lQt5Gui
	-lEGL
	-lGLESv1_CM
	-lGLESv2
	-lmali
)


TARGET_LINK_LIBRARIES(${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME}
		${CP_VDU_LIBRARY_TARGET_LINK_LIBRARIES}
	)
	
TARGET_LINK_LIBRARIES(${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME}
		${CP_VDU_LIBRARY_TARGET_LINK_LIBRARIES}
	)


# 按照一般的习惯，静态库名字跟动态库名字应该是一致的，只是扩展名不同；
SET_TARGET_PROPERTIES(${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME} PROPERTIES OUTPUT_NAME ${CP_VDU_LIBRARY_PROJECT_NAME})
SET_TARGET_PROPERTIES(${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME} PROPERTIES OUTPUT_NAME ${CP_VDU_LIBRARY_PROJECT_NAME})


# cmake在构建一个新的target时，会尝试清理掉其他使用这个名字的库，
# 因此，在构建libhello.a时，就会清理掉libhello.so.
# 为了回避这个问题，比如再次使用SET_TARGET_PROPERTIES定义 CLEAN_DIRECT_OUTPUT属性。
SET_TARGET_PROPERTIES (${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES (${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)


# 按照规则，动态库是应该包含一个版本号的，
# VERSION指代动态库版本，SOVERSION指代API版本。
string(SUBSTRING ${CP_APP_VDU_VERSION} 0 1 CP_APP_VDU_VERSION_MAJOR)
SET_TARGET_PROPERTIES (${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME} PROPERTIES VERSION ${CP_APP_VDU_VERSION} SOVERSION ${CP_APP_VDU_VERSION_MAJOR})
SET_TARGET_PROPERTIES (${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME} PROPERTIES VERSION ${CP_APP_VDU_VERSION} SOVERSION ${CP_APP_VDU_VERSION_MAJOR})


#SET_TARGET_PROPERTIES(${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME} PROPERTIES OUTPUT_NAME ${CP_VDU_LIBRARY_LIBRARY_RELEASE_NAME})
#SET_TARGET_PROPERTIES(${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME} PROPERTIES OUTPUT_NAME ${CP_VDU_LIBRARY_LIBRARY_RELEASE_NAME})


MESSAGE(STATUS " ")
MESSAGE(STATUS " ")
MESSAGE(STATUS "-----------------build project:[ ${CP_VDU_LIBRARY_PROJECT_NAME} ]-----------------")
MESSAGE(STATUS "c compiler:[ ${CMAKE_C_COMPILER} ] cxx compiler:[ ${CMAKE_CXX_COMPILER} ]")
MESSAGE(STATUS "project:[ ${CP_VDU_LIBRARY_PROJECT_NAME} ] path  : [ ${CP_VDU_PROJECT_SOURCE_DIR} ]")
MESSAGE(STATUS "project:[ ${CP_VDU_LIBRARY_PROJECT_NAME} ] output: [ ${LIBRARY_OUTPUT_PATH} ]")
MESSAGE(STATUS "shared library:[${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME}]")
MESSAGE(STATUS "static library:[${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME}]")
MESSAGE(STATUS "build library:[${CP_VDU_LIBRARY_PROJECT_NAME}]")




#install library source
#set hisiv400 platform
SET(CP_VDU_PROJECT_INSTALL_DIR ${LIBRARY_OUTPUT_PATH}/build/release)
IF(${CP_PLATFORM} STREQUAL "hisiv400")
	SET(CP_VDU_PROJECT_INSTALL_DIR ${CP_APP_VDU_SIMPLE_DEMO_DIR})	
ENDIF()


SET(CP_VDU_PROJECT_INSTALL_LIBRARY_DIR ${CP_VDU_PROJECT_INSTALL_DIR}/lib/${CP_THIRD_PARTY_PLATFORM_NAME})
SET(CP_VDU_PROJECT_INSTALL_INCLUDE_DIR ${CP_VDU_PROJECT_INSTALL_DIR}/include)
SET(CP_VDU_PROJECT_INSTALL_BIN_DIR ${CP_VDU_PROJECT_INSTALL_DIR}/bin)
SET(CP_VDU_PROJECT_INSTALL_DOC_DIR ${CP_VDU_PROJECT_INSTALL_DIR}/doc)

MESSAGE(STATUS "install path:[${CP_VDU_PROJECT_INSTALL_DIR}]")
MESSAGE(STATUS "install library path:[${CP_VDU_PROJECT_INSTALL_DIR}${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR}]")

SET(CMAKE_INSTALL_PREFIX ${CP_VDU_PROJECT_INSTALL_DIR})
SET(CP_VDU_PROJECT_SOURCE_INCLUDE_DIR ${CP_VDU_PROJECT_SOURCE_DIR}/include)


INSTALL(TARGETS ${CP_VDU_LIBRARY_LIBRARY_SHARED_NAME} ${CP_VDU_LIBRARY_LIBRARY_STATIC_NAME}
	RUNTIME DESTINATION ${CP_VDU_PROJECT_INSTALL_BIN_DIR}
	LIBRARY DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR}
	ARCHIVE DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR}
	)

INSTALL(FILES
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_std.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_api.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_type.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_vector_stream_type.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_rect.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_pixel.h
	${CP_VDU_PROJECT_SOURCE_INCLUDE_DIR}/cp_vdu_status.h
	DESTINATION ${CP_VDU_PROJECT_INSTALL_INCLUDE_DIR})

INSTALL(DIRECTORY ${CP_VDU_PROJECT_SOURCE_DIR}/doc/ DESTINATION ${CP_VDU_PROJECT_INSTALL_DOC_DIR})


INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5Charts.so.5 	DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5Core.so.5		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5DBus.so.5		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5EglFSDeviceIntegration.so.5		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5OpenGL.so.5		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5Svg.so.5		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5Gui.so.5		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${QT_LIBRARY_DIR}/libQt5Widgets.so.5	DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(DIRECTORY ${QT_LIBRARY_DIR}/../plugins		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})

INSTALL(FILES ${CP_THIRD_PARTY_DIR}/lib/arm-hisiv400/libiconv-1.14/lib/preloadable_libiconv.so DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})

INSTALL(FILES ${HI3536_GPU_LIBRARY_DIR}/libEGL.so		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${HI3536_GPU_LIBRARY_DIR}/libGLESv1_CM.so	DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${HI3536_GPU_LIBRARY_DIR}/libGLESv2.so	DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})
INSTALL(FILES ${HI3536_GPU_LIBRARY_DIR}/libmali.so		DESTINATION ${CP_VDU_PROJECT_INSTALL_LIBRARY_DIR})



